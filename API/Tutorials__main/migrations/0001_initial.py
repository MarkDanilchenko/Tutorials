# Generated by Django 5.1.4 on 2024-12-25 20:44

import Tutorials__main.models
import django.contrib.auth.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tutorial',
            fields=[
                ('id', models.UUIDField(auto_created=True, help_text='Tutorial ID', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Tutorial title', max_length=100, unique=True, verbose_name='Tutorial title')),
                ('description', models.TextField(blank=True, default='', help_text='Tutorial description', max_length=1000, null=True, verbose_name='Tutorial description')),
                ('isPublished', models.BooleanField(default=False, help_text='Is published', verbose_name='Is published')),
                ('published_at', models.DateTimeField(default=None, help_text='Date and time when the tutorial was published', null=True, verbose_name='Date and time when the tutorial was published')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the tutorial was created', verbose_name='Date and time when the tutorial was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the tutorial was last updated', verbose_name='Date and time when the tutorial was last updated')),
            ],
            options={
                'verbose_name': 'Tutorial',
                'verbose_name_plural': 'Tutorials',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(auto_created=True, help_text='User ID', primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Username', max_length=100, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, default='', help_text='First name', max_length=100, null=True, validators=[Tutorials__main.models.name_validator], verbose_name='First name')),
                ('last_name', models.CharField(blank=True, default='', help_text='Last name', max_length=100, null=True, validators=[Tutorials__main.models.name_validator], verbose_name='Last name')),
                ('email', models.EmailField(help_text='Email', max_length=254, unique=True, validators=[Tutorials__main.models.email_validator], verbose_name='Email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
